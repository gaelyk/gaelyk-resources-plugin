buildscript {
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-gaelyk-plugin:0.3.2'
        classpath 'org.gradle.api.plugins:gradle-gae-plugin:0.7'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'gae'
apply plugin: 'gaelyk'

def pluginName = "gaelyk-resources"
version = "0.1.1"
group = 'org.gaelyk'

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	def gaeVersion = '1.6.6'
	groovy 'org.codehaus.groovy:groovy-all:1.8.6'
	compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion",
			"com.google.appengine:appengine-api-labs:$gaeVersion"
            
	compile	'org.gaelyk:gaelyk:1.2'


	testCompile 'org.gaelyk:gaelyk-spock:0.3.0.1', {
        exclude group: 'com.google.appengine'
    }
	testCompile "com.google.appengine:appengine-api-stubs:$gaeVersion",
	testCompile "com.google.appengine:appengine-testing:$gaeVersion",

			
	testCompile files('src/test/resources/WEB-INF/lib/test-gaelyk-resources-plugin.jar')
}


jar {
	baseName pluginName
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	baseName = pluginName
	from "${project.docsDir}/javadoc"
	classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
	baseName = pluginName
	from sourceSets.main.allSource
	classifier = 'sources'
}

configurations {
    plugin
}

artifacts {
	plugin jar
	plugin javadocJar
	plugin sourcesJar
}



if(hasProperty('sonatypeUsername') && hasProperty('sonatypePassword')){

	signing {
		sign configurations.plugin
	}
	
	uploadPlugin {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
				def auth = {
				  authentication(userName: sonatypeUsername, password: sonatypePassword)
				}
	
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/", auth)
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots", auth)
	
	
				pom.project {
				   name 'Gaelyk Resources Plugin'
				   packaging 'jar'
				   description 'Gaelyk Resources Plugin allows other binary plugin to provide additoinal static resources.'
				   url 'https://github.com/musketyr/gaelyk-resources-plugin'
	
				   scm {
					   url 'scm:git@github.com:musketyr/gaelyk-resources-plugin.git'
					   connection 'scm:git@github.com:musketyr/gaelyk-resources-plugin.git'
					   developerConnection 'scm:git@github.com:musketyr/gaelyk-resources-plugin.git'
				   }
	
				   licenses {
					   license {
						   name 'The Apache Software License, Version 2.0'
						   url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						   distribution 'repo'
					   }
				   }
	
				   developers {
					   developer {
						   id 'vladimirorany'
						   name 'Vladimir Orany'
					   }
				   }
			   }
	
			   //mess with the generated pom to set the 'packaging' tag
			   pom.withXml { XmlProvider xmlProvider ->
				   def xml = xmlProvider.asString()
				   def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))
	
				   pomXml.version[0] + { packaging('jar') }
	
				   def newXml = new StringWriter()
				   def printer = new XmlNodePrinter(new PrintWriter(newXml))
				   printer.preserveWhitespace = true
				   printer.print(pomXml)
				   xml.setLength(0)
				   xml.append(newXml.toString())
			   }
			}
		}
	}
}

jar.enabled = true
